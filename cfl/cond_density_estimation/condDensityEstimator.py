from cfl.block import Block
import cfl.cond_density_estimation as c # for instantiating models by str name

class CondDensityEstimator(Block):
    '''
    This class inherits Block to define a Block subtype for conditional density
    estimation. It takes in specifications for a particular conditional density
    estimation model to use, and manages its instantiation, and serves as an 
    interface between Experiment training/prediction calls and the model itself.

    Attributes:
        data_info : information about the data being trained with / predictd on
        block_params : parameters to define the model
        name : name of the Block type
        model : the conditional density estimation model

    Methods:
        _create_model : given self.block_params, build the CDE model
        get_block_params : return self.block_params
        _get_default_block_params : return values for block_params to defualt to 
            if unspecified
        train : train a model to estimate P(Y|X=x) from X,Y
        predict : predict P(Y|X=x) given a new sample x
        save_block : save the state of the object
        load_block : load the state of the object from a specified file path
    '''

    def __init__(self, data_info, block_params):
        '''
        Initialize CondDensityEstimator.
        
        Arguments:
            data_info (dict): dict with information about the dataset shape
            block_params (dict) :  a set of parameters specifying a CDE. 
                The 'model' key must be specified and can either be 
                the name of an cfl.cond_density_estimation model, or an 
                instantiated CDE model object that follows the 
                cfl.clustering.CDEModel interface. Hyperparameters for the
                model may be specified through the 'model_params' dictionary. 
        Returns: None
        '''

        # parameter checks and self.params assignment done here
        super().__init__(data_info=data_info, block_params=block_params)

        # attributes:
        self.name = 'CondDensityEstimator'
        self.model = self._create_model()

    def _create_model(self):
        '''
        Return a conditional density estimator model as specified by 
        self.block_params. If self.block_params['model'] is a string, it will 
        try to instantiate a built-in cfl.cond_density_estmation model with the 
        same name. Otherwise, it will treat the value of 
        self.block_params['model'] as the instantiated model.
        
        Arguments: None
        Returns:
            type varies : a model that implements conditional density estimation
                and follows the cde_model interface.
        '''
        if isinstance(self.block_params['model'], str):
            # create model
            # TODO: this is hacky
            model = eval('c.' + self.block_params['model'])(self.data_info, 
                self.block_params['model_params'])
        else:
            model = self.block_params['model']
        return model

    def get_block_params(self):
        ''' 
        Get parameters for this clustering model.
        Arguments: None
        Returns: 
            dict : dictionary of parameter names (keys) and values (values)
        '''
        return self.block_params()

    def _get_default_block_params(self):
        """ 
        Private method that specifies default CDE parameters.
        Arguments: None
        Returns: 
            dict: dictionary of parameter names (keys) and values (values)
        """
        return  {'model'   : 'CondExpMod',
                 'model_params' : {},
                 'verbose' : 1 }

    def train(self, dataset, prev_results):
        """
        Wrapper to train model.
        Arguments:
            dataset (Dataset): Dataset object containing X, Y data to 
                assign partition labels to
            prev_results (dict): dictionary that contains any results generated
                in previous Block in Experiment pipeline (usually none for CDE).
        Returns:
            dict : results generated by the model        
        """
        return self.model.train(dataset, prev_results)

    def predict(self, dataset, prev_results):
        """  
        Wrapper to generate model predictions.
        Arguments:
            dataset (Dataset): Dataset object containing X, Y data to 
                assign partition labels to
            prev_results (dict): dictionary that contains any results generated
                in previous Block in Experiment pipeline (usually none for CDE).
        Returns:
            dict : results generated by the model
        """
        return self.model.predict(dataset, prev_results)

    def save_block(self, file_path):
        ''' 
        Wrapper to save model.
        Arguments:
            file_path (str) : file path to save block to
        Returns: None
        '''
        self.model.save_model(file_path)

    def load_block(self, file_path):
        '''
        Wrapper to load model.
        Arguments:
            file_path (str) : file path to block to load
        Returns: None
        '''
        self.model.load_model(file_path)
